{"ast":null,"code":"import _classCallCheck from \"/Users/Pajamas/portfolios/tetris/tetris-v1/tetris/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Pajamas/portfolios/tetris/tetris-v1/tetris/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\nimport { updateTilt } from \"./Utils\";\nexport var TiltUpdater = /*#__PURE__*/function () {\n  function TiltUpdater(container) {\n    _classCallCheck(this, TiltUpdater);\n    this.container = container;\n  }\n  _createClass(TiltUpdater, [{\n    key: \"getTransformValues\",\n    value: function getTransformValues(particle) {\n      var _particle$tilt;\n      var tilt = ((_particle$tilt = particle.tilt) === null || _particle$tilt === void 0 ? void 0 : _particle$tilt.enable) && particle.tilt;\n      return {\n        b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n        c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function init(particle) {\n      var _particle$options$til;\n      var tiltOptions = particle.options.tilt;\n      if (!tiltOptions) {\n        return;\n      }\n      particle.tilt = {\n        enable: tiltOptions.enable,\n        value: getRangeValue(tiltOptions.value) * Math.PI / 180,\n        sinDirection: getRandom() >= 0.5 ? 1 : -1,\n        cosDirection: getRandom() >= 0.5 ? 1 : -1\n      };\n      var tiltDirection = tiltOptions.direction;\n      if (tiltDirection === \"random\") {\n        var index = Math.floor(getRandom() * 2);\n        tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n      }\n      switch (tiltDirection) {\n        case \"counter-clockwise\":\n        case \"counterClockwise\":\n          particle.tilt.status = \"decreasing\";\n          break;\n        case \"clockwise\":\n          particle.tilt.status = \"increasing\";\n          break;\n      }\n      var tiltAnimation = (_particle$options$til = particle.options.tilt) === null || _particle$options$til === void 0 ? void 0 : _particle$options$til.animation;\n      if (tiltAnimation !== null && tiltAnimation !== void 0 && tiltAnimation.enable) {\n        particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n        particle.tilt.velocity = getRangeValue(tiltAnimation.speed) / 360 * this.container.retina.reduceFactor;\n        if (!tiltAnimation.sync) {\n          particle.tilt.velocity *= getRandom();\n        }\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled(particle) {\n      var _particle$options$til2;\n      var tiltAnimation = (_particle$options$til2 = particle.options.tilt) === null || _particle$options$til2 === void 0 ? void 0 : _particle$options$til2.animation;\n      return !particle.destroyed && !particle.spawning && !!(tiltAnimation !== null && tiltAnimation !== void 0 && tiltAnimation.enable);\n    }\n  }, {\n    key: \"loadOptions\",\n    value: function loadOptions(options) {\n      if (!options.tilt) {\n        options.tilt = new Tilt();\n      }\n      for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        sources[_key - 1] = arguments[_key];\n      }\n      for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n        var source = _sources[_i];\n        options.tilt.load(source === null || source === void 0 ? void 0 : source.tilt);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(particle, delta) {\n      if (!this.isEnabled(particle)) {\n        return;\n      }\n      updateTilt(particle, delta);\n    }\n  }]);\n  return TiltUpdater;\n}();","map":{"version":3,"names":["getRandom","getRangeValue","Tilt","updateTilt","TiltUpdater","container","_classCallCheck","_createClass","key","value","getTransformValues","particle","_particle$tilt","tilt","enable","b","Math","cos","cosDirection","undefined","c","sin","sinDirection","init","_particle$options$til","tiltOptions","options","PI","tiltDirection","direction","index","floor","status","tiltAnimation","animation","decay","velocity","speed","retina","reduceFactor","sync","isEnabled","_particle$options$til2","destroyed","spawning","loadOptions","_len","arguments","length","sources","Array","_key","_i","_sources","source","load","update","delta"],"sources":["/Users/Pajamas/portfolios/tetris/tetris-v1/tetris/node_modules/tsparticles-updater-tilt/esm/TiltUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Tilt } from \"./Options/Classes/Tilt\";\nimport { updateTilt } from \"./Utils\";\nexport class TiltUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    getTransformValues(particle) {\n        const tilt = particle.tilt?.enable && particle.tilt;\n        return {\n            b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n            c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined,\n        };\n    }\n    init(particle) {\n        const tiltOptions = particle.options.tilt;\n        if (!tiltOptions) {\n            return;\n        }\n        particle.tilt = {\n            enable: tiltOptions.enable,\n            value: (getRangeValue(tiltOptions.value) * Math.PI) / 180,\n            sinDirection: getRandom() >= 0.5 ? 1 : -1,\n            cosDirection: getRandom() >= 0.5 ? 1 : -1,\n        };\n        let tiltDirection = tiltOptions.direction;\n        if (tiltDirection === \"random\") {\n            const index = Math.floor(getRandom() * 2);\n            tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n        }\n        switch (tiltDirection) {\n            case \"counter-clockwise\":\n            case \"counterClockwise\":\n                particle.tilt.status = \"decreasing\";\n                break;\n            case \"clockwise\":\n                particle.tilt.status = \"increasing\";\n                break;\n        }\n        const tiltAnimation = particle.options.tilt?.animation;\n        if (tiltAnimation?.enable) {\n            particle.tilt.decay = 1 - getRangeValue(tiltAnimation.decay);\n            particle.tilt.velocity = (getRangeValue(tiltAnimation.speed) / 360) * this.container.retina.reduceFactor;\n            if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const tiltAnimation = particle.options.tilt?.animation;\n        return !particle.destroyed && !particle.spawning && !!tiltAnimation?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.tilt) {\n            options.tilt = new Tilt();\n        }\n        for (const source of sources) {\n            options.tilt.load(source?.tilt);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateTilt(particle, delta);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}