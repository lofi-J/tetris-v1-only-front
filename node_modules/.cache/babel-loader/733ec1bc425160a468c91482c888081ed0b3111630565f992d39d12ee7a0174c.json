{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { checkCollision, createStage } from \"../../gameHelpers\";\nimport { playSound } from \"./playSound\";\nimport { useSelector } from \"react-redux\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  const [ghostPositions, setGhostPositions] = useState([]);\n  const isMute = useSelector(store => store.isMute.value);\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        if (!isMute) playSound('/sound/line_clear.mp3', .08);\n        return ack;\n      }\n      ack.push(row);\n      return ack;\n    }, []);\n    const calculateGhostPos = stage => {\n      let ghostPos = [];\n      const clonedPlayer = JSON.parse(JSON.stringify(player));\n      for (let i = 0; i < 20; i++) {\n        if (checkCollision(clonedPlayer, stage, {\n          x: 0,\n          y: 1\n        })) {\n          break;\n        } else {\n          clonedPlayer.pos.y += 1;\n        }\n      }\n      const calculatedPos = {\n        ...clonedPlayer.pos\n      };\n      clonedPlayer.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            ghostPos.push({\n              x: x + calculatedPos.x,\n              y: y + calculatedPos.y\n            });\n          }\n        });\n      });\n\n      // player가 ghost와 만나기전에 고스트 블럭을 지우기\n      ghostPos.forEach(value => {\n        if (value.y <= player.pos.y + 3) {\n          ghostPos = [];\n          return;\n        }\n      });\n      return ghostPos;\n    };\n    // Ghost Position \n    setGhostPositions(calculateGhostPos(stage));\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      //충돌 감지시 새 블럭 생성\n      if (player.collide) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n    setStage(prev => updateStage(prev));\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared, ghostPositions];\n};\n_s(useStage, \"brUY43I3SZlKqeMag5ebX4VUjwc=\", false, function () {\n  return [useSelector];\n});","map":{"version":3,"names":["useState","useEffect","checkCollision","createStage","playSound","useSelector","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","ghostPositions","setGhostPositions","isMute","store","value","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","calculateGhostPos","ghostPos","clonedPlayer","JSON","parse","stringify","i","x","y","pos","calculatedPos","tetromino","forEach","updateStage","prevStage","map","collide"],"sources":["/Users/Pajamas/portfolios/tetris/tetris-v1/tetris/src/hooks/tetris/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { checkCollision, createStage } from \"../../gameHelpers\";\nimport { playSound } from \"./playSound\";\nimport { useSelector } from \"react-redux\";\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);    \n    const [ghostPositions, setGhostPositions] = useState([]);\n\n    const isMute = useSelector((store) => store.isMute.value);\n    \n\n\n    useEffect( () => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage => \n            newStage.reduce((ack, row) => {\n                if(row.findIndex(cell => cell[0] === 0) ===-1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n\n                    if(!isMute) playSound('/sound/line_clear.mp3', .08);\n                    \n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, []);\n\n        const calculateGhostPos = (stage) => {\n            let ghostPos = [];\n            const clonedPlayer = JSON.parse(JSON.stringify(player));\n            \n            for(let i=0; i<20; i++) {\n                if(checkCollision(clonedPlayer, stage, {x: 0, y: 1})) {\n                    break;\n                } else {\n                    clonedPlayer.pos.y += 1;\n                }\n            }\n            \n            const calculatedPos = {...clonedPlayer.pos};\n\n            clonedPlayer.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        ghostPos.push({x: x + calculatedPos.x, y: y + calculatedPos.y});\n                    }   \n                })\n            })\n            \n            // player가 ghost와 만나기전에 고스트 블럭을 지우기\n            ghostPos.forEach((value) => {\n                if(value.y <= player.pos.y+3) {\n                    ghostPos = [];\n                    return;\n                }\n            })\n            \n            return ghostPos;\n        }\n        // Ghost Position \n        setGhostPositions(calculateGhostPos(stage));\n\n        const updateStage = prevStage => {\n            const newStage = prevStage.map(row => row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)));\n            \n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n                    }\n                })\n            });\n            \n            //충돌 감지시 새 블럭 생성\n            if(player.collide) {  \n                resetPlayer() \n                return sweepRows(newStage);\n            }\n            return newStage;\n        }\n        \n        setStage(prev => updateStage(prev));\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared, ghostPositions];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}