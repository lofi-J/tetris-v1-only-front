{"ast":null,"code":"import _classCallCheck from \"/Users/Pajamas/portfolios/tetris/tetris-v1/tetris/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Pajamas/portfolios/tetris/tetris-v1/tetris/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport var EmitterInstance = /*#__PURE__*/function () {\n  function EmitterInstance(engine, emitters, container, options, position) {\n    var _this = this,\n      _this$options$life$de,\n      _this$_initialPositio,\n      _this$_engine$emitter,\n      _particlesOptions2,\n      _particlesOptions3,\n      _particlesOptions3$mo,\n      _particlesOptions$mov,\n      _particlesOptions$mov2,\n      _this$options$size,\n      _this$options$life$co;\n    _classCallCheck(this, EmitterInstance);\n    this.emitters = emitters;\n    this.container = container;\n    this._calcPosition = function () {\n      return calcPositionOrRandomFromSizeRanged({\n        size: _this.container.canvas.size,\n        position: _this.options.position\n      });\n    };\n    this._destroy = function () {\n      _this.emitters.removeEmitter(_this);\n      _this._engine.dispatchEvent(\"emitterDestroyed\", {\n        container: _this.container,\n        data: {\n          emitter: _this\n        }\n      });\n    };\n    this._emit = function () {\n      if (_this._paused) {\n        return;\n      }\n      var quantity = getRangeValue(_this.options.rate.quantity);\n      _this._emitParticles(quantity);\n    };\n    this._emitParticles = function (quantity) {\n      var position = _this.getPosition(),\n        size = _this.getSize(),\n        singleParticlesOptions = itemFromSingleOrMultiple(_this._particlesOptions);\n      for (var i = 0; i < quantity; i++) {\n        var _this$_shape$randomPo, _this$_shape;\n        var _particlesOptions = deepExtend({}, singleParticlesOptions);\n        if (_this.spawnColor) {\n          var _this$options$spawnCo;\n          var hslAnimation = (_this$options$spawnCo = _this.options.spawnColor) === null || _this$options$spawnCo === void 0 ? void 0 : _this$options$spawnCo.animation;\n          if (hslAnimation) {\n            _this.spawnColor.h = _this._setColorAnimation(hslAnimation.h, _this.spawnColor.h, 360);\n            _this.spawnColor.s = _this._setColorAnimation(hslAnimation.s, _this.spawnColor.s, 100);\n            _this.spawnColor.l = _this._setColorAnimation(hslAnimation.l, _this.spawnColor.l, 100);\n          }\n          if (!_particlesOptions.color) {\n            _particlesOptions.color = {\n              value: _this.spawnColor\n            };\n          } else {\n            _particlesOptions.color.value = _this.spawnColor;\n          }\n        }\n        if (!position) {\n          return;\n        }\n        var pPosition = (_this$_shape$randomPo = (_this$_shape = _this._shape) === null || _this$_shape === void 0 ? void 0 : _this$_shape.randomPosition(position, size, _this.fill)) !== null && _this$_shape$randomPo !== void 0 ? _this$_shape$randomPo : position;\n        _this.container.particles.addParticle(pPosition, _particlesOptions);\n      }\n    };\n    this._prepareToDie = function () {\n      var _this$options$life;\n      if (_this._paused) {\n        return;\n      }\n      var duration = (_this$options$life = _this.options.life) === null || _this$options$life === void 0 ? void 0 : _this$options$life.duration;\n      if (_this.container.retina.reduceFactor && (_this._lifeCount > 0 || _this._immortal) && duration !== undefined && duration > 0) {\n        _this._duration = duration * 1000;\n      }\n    };\n    this._setColorAnimation = function (animation, initValue, maxValue) {\n      var _animation$speed;\n      var container = _this.container;\n      if (!animation.enable) {\n        return initValue;\n      }\n      var colorOffset = randomInRange(animation.offset),\n        delay = getRangeValue(_this.options.rate.delay),\n        emitFactor = 1000 * delay / container.retina.reduceFactor,\n        colorSpeed = getRangeValue((_animation$speed = animation.speed) !== null && _animation$speed !== void 0 ? _animation$speed : 0);\n      return (initValue + colorSpeed * container.fpsLimit / emitFactor + colorOffset * 3.6) % maxValue;\n    };\n    this._engine = engine;\n    this._currentDuration = 0;\n    this._currentEmitDelay = 0;\n    this._currentSpawnDelay = 0;\n    this._initialPosition = position;\n    if (options instanceof Emitter) {\n      this.options = options;\n    } else {\n      this.options = new Emitter();\n      this.options.load(options);\n    }\n    this._spawnDelay = ((_this$options$life$de = this.options.life.delay) !== null && _this$options$life$de !== void 0 ? _this$options$life$de : 0) * 1000 / this.container.retina.reduceFactor;\n    this.position = (_this$_initialPositio = this._initialPosition) !== null && _this$_initialPositio !== void 0 ? _this$_initialPositio : this._calcPosition();\n    this.name = this.options.name;\n    this._shape = (_this$_engine$emitter = this._engine.emitterShapeManager) === null || _this$_engine$emitter === void 0 ? void 0 : _this$_engine$emitter.getShape(this.options.shape);\n    console.log(this.options.shape, this._shape);\n    this.fill = this.options.fill;\n    this._firstSpawn = !this.options.life.wait;\n    this._startParticlesAdded = false;\n    var particlesOptions = deepExtend({}, this.options.particles);\n    (_particlesOptions2 = particlesOptions) !== null && _particlesOptions2 !== void 0 ? _particlesOptions2 : particlesOptions = {};\n    (_particlesOptions3$mo = (_particlesOptions3 = particlesOptions).move) !== null && _particlesOptions3$mo !== void 0 ? _particlesOptions3$mo : _particlesOptions3.move = {};\n    (_particlesOptions$mov2 = (_particlesOptions$mov = particlesOptions.move).direction) !== null && _particlesOptions$mov2 !== void 0 ? _particlesOptions$mov2 : _particlesOptions$mov.direction = this.options.direction;\n    if (this.options.spawnColor) {\n      this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n    }\n    this._paused = !this.options.autoPlay;\n    this._particlesOptions = particlesOptions;\n    this.size = (_this$options$size = this.options.size) !== null && _this$options$size !== void 0 ? _this$options$size : function () {\n      var size = new EmitterSize();\n      size.load({\n        height: 0,\n        mode: \"percent\",\n        width: 0\n      });\n      return size;\n    }();\n    this._lifeCount = (_this$options$life$co = this.options.life.count) !== null && _this$options$life$co !== void 0 ? _this$options$life$co : -1;\n    this._immortal = this._lifeCount <= 0;\n    this._engine.dispatchEvent(\"emitterCreated\", {\n      container: container,\n      data: {\n        emitter: this\n      }\n    });\n    this.play();\n  }\n  _createClass(EmitterInstance, [{\n    key: \"externalPause\",\n    value: function externalPause() {\n      this._paused = true;\n      this.pause();\n    }\n  }, {\n    key: \"externalPlay\",\n    value: function externalPlay() {\n      this._paused = false;\n      this.play();\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      if (this.options.domId) {\n        var container = this.container,\n          element = document.getElementById(this.options.domId);\n        if (element) {\n          var elRect = element.getBoundingClientRect();\n          return {\n            x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n            y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio\n          };\n        }\n      }\n      return this.position;\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      var container = this.container;\n      if (this.options.domId) {\n        var element = document.getElementById(this.options.domId);\n        if (element) {\n          var elRect = element.getBoundingClientRect();\n          return {\n            width: elRect.width * container.retina.pixelRatio,\n            height: elRect.height * container.retina.pixelRatio\n          };\n        }\n      }\n      return {\n        width: this.size.mode === \"percent\" ? container.canvas.size.width * this.size.width / 100 : this.size.width,\n        height: this.size.mode === \"percent\" ? container.canvas.size.height * this.size.height / 100 : this.size.height\n      };\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this._paused) {\n        return;\n      }\n      delete this._emitDelay;\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      var _this$_spawnDelay;\n      if (this._paused) {\n        return;\n      }\n      if (!(this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal || !this.options.life.count) && (this._firstSpawn || this._currentSpawnDelay >= ((_this$_spawnDelay = this._spawnDelay) !== null && _this$_spawnDelay !== void 0 ? _this$_spawnDelay : 0)))) {\n        return;\n      }\n      if (this._emitDelay === undefined) {\n        var delay = getRangeValue(this.options.rate.delay);\n        this._emitDelay = 1000 * delay / this.container.retina.reduceFactor;\n      }\n      if (this._lifeCount > 0 || this._immortal) {\n        this._prepareToDie();\n      }\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var initialPosition = this._initialPosition;\n      this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin) ? initialPosition : this._calcPosition();\n    }\n  }, {\n    key: \"update\",\n    value: function update(delta) {\n      if (this._paused) {\n        return;\n      }\n      if (this._firstSpawn) {\n        var _this$_spawnDelay2, _this$_emitDelay;\n        this._firstSpawn = false;\n        this._currentSpawnDelay = (_this$_spawnDelay2 = this._spawnDelay) !== null && _this$_spawnDelay2 !== void 0 ? _this$_spawnDelay2 : 0;\n        this._currentEmitDelay = (_this$_emitDelay = this._emitDelay) !== null && _this$_emitDelay !== void 0 ? _this$_emitDelay : 0;\n      }\n      if (!this._startParticlesAdded) {\n        this._startParticlesAdded = true;\n        this._emitParticles(this.options.startCount);\n      }\n      if (this._duration !== undefined) {\n        this._currentDuration += delta.value;\n        if (this._currentDuration >= this._duration) {\n          this.pause();\n          if (this._spawnDelay !== undefined) {\n            delete this._spawnDelay;\n          }\n          if (!this._immortal) {\n            this._lifeCount--;\n          }\n          if (this._lifeCount > 0 || this._immortal) {\n            var _this$options$life$de2;\n            this.position = this._calcPosition();\n            this._spawnDelay = ((_this$options$life$de2 = this.options.life.delay) !== null && _this$options$life$de2 !== void 0 ? _this$options$life$de2 : 0) * 1000 / this.container.retina.reduceFactor;\n          } else {\n            this._destroy();\n          }\n          this._currentDuration -= this._duration;\n          delete this._duration;\n        }\n      }\n      if (this._spawnDelay !== undefined) {\n        this._currentSpawnDelay += delta.value;\n        if (this._currentSpawnDelay >= this._spawnDelay) {\n          this._engine.dispatchEvent(\"emitterPlay\", {\n            container: this.container\n          });\n          this.play();\n          this._currentSpawnDelay -= this._currentSpawnDelay;\n          delete this._spawnDelay;\n        }\n      }\n      if (this._emitDelay !== undefined) {\n        this._currentEmitDelay += delta.value;\n        if (this._currentEmitDelay >= this._emitDelay) {\n          this._emit();\n          this._currentEmitDelay -= this._emitDelay;\n        }\n      }\n    }\n  }]);\n  return EmitterInstance;\n}();","map":{"version":3,"names":["Vector","calcPositionOrRandomFromSizeRanged","deepExtend","getRangeValue","isPointInside","itemFromSingleOrMultiple","randomInRange","rangeColorToHsl","Emitter","EmitterSize","EmitterInstance","engine","emitters","container","options","position","_this","_this$options$life$de","_this$_initialPositio","_this$_engine$emitter","_particlesOptions2","_particlesOptions3","_particlesOptions3$mo","_particlesOptions$mov","_particlesOptions$mov2","_this$options$size","_this$options$life$co","_classCallCheck","_calcPosition","size","canvas","_destroy","removeEmitter","_engine","dispatchEvent","data","emitter","_emit","_paused","quantity","rate","_emitParticles","getPosition","getSize","singleParticlesOptions","_particlesOptions","i","_this$_shape$randomPo","_this$_shape","particlesOptions","spawnColor","_this$options$spawnCo","hslAnimation","animation","h","_setColorAnimation","s","l","color","value","pPosition","_shape","randomPosition","fill","particles","addParticle","_prepareToDie","_this$options$life","duration","life","retina","reduceFactor","_lifeCount","_immortal","undefined","_duration","initValue","maxValue","_animation$speed","enable","colorOffset","offset","delay","emitFactor","colorSpeed","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","load","_spawnDelay","name","emitterShapeManager","getShape","shape","console","log","_firstSpawn","wait","_startParticlesAdded","move","direction","autoPlay","height","mode","width","count","play","_createClass","key","externalPause","pause","externalPlay","domId","element","document","getElementById","elRect","getBoundingClientRect","x","pixelRatio","y","_emitDelay","_this$_spawnDelay","resize","initialPosition","origin","update","delta","_this$_spawnDelay2","_this$_emitDelay","startCount","_this$options$life$de2"],"sources":["/Users/Pajamas/portfolios/tetris/tetris-v1/tetris/node_modules/tsparticles-plugin-emitters/esm/EmitterInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._calcPosition = () => {\n            return calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n        };\n        this._destroy = () => {\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._emit = () => {\n            if (this._paused) {\n                return;\n            }\n            const quantity = getRangeValue(this.options.rate.quantity);\n            this._emitParticles(quantity);\n        };\n        this._emitParticles = (quantity) => {\n            const position = this.getPosition(), size = this.getSize(), singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n            for (let i = 0; i < quantity; i++) {\n                const particlesOptions = deepExtend({}, singleParticlesOptions);\n                if (this.spawnColor) {\n                    const hslAnimation = this.options.spawnColor?.animation;\n                    if (hslAnimation) {\n                        this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                        this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                        this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                    }\n                    if (!particlesOptions.color) {\n                        particlesOptions.color = {\n                            value: this.spawnColor,\n                        };\n                    }\n                    else {\n                        particlesOptions.color.value = this.spawnColor;\n                    }\n                }\n                if (!position) {\n                    return;\n                }\n                const pPosition = this._shape?.randomPosition(position, size, this.fill) ?? position;\n                this.container.particles.addParticle(pPosition, particlesOptions);\n            }\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > 0 || this._immortal) &&\n                duration !== undefined &&\n                duration > 0) {\n                this._duration = duration * 1000;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (1000 * delay) / container.retina.reduceFactor, colorSpeed = getRangeValue(animation.speed ?? 0);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay = ((this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this._shape = this._engine.emitterShapeManager?.getShape(this.options.shape);\n        console.log(this.options.shape, this._shape);\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this.size =\n            this.options.size ??\n                (() => {\n                    const size = new EmitterSize();\n                    size.load({\n                        height: 0,\n                        mode: \"percent\",\n                        width: 0,\n                    });\n                    return size;\n                })();\n        this._lifeCount = this.options.life.count ?? -1;\n        this._immortal = this._lifeCount <= 0;\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    getPosition() {\n        if (this.options.domId) {\n            const container = this.container, element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n                    y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio,\n                };\n            }\n        }\n        return this.position;\n    }\n    getSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                };\n            }\n        }\n        return {\n            width: this.size.mode === \"percent\"\n                ? (container.canvas.size.width * this.size.width) / 100\n                : this.size.width,\n            height: this.size.mode === \"percent\"\n                ? (container.canvas.size.height * this.size.height) / 100\n                : this.size.height,\n        };\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > 0 || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? 0)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? 0;\n            this._currentEmitDelay = this._emitDelay ?? 0;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > 0 || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._spawnDelay = ((this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n}\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,kCAAkC,EAAEC,UAAU,EAAEC,aAAa,EAAEC,aAAa,EAAEC,wBAAwB,EAAEC,aAAa,EAAEC,eAAe,QAAS,oBAAoB;AACpL,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,WAAaC,eAAe;EACxB,SAAAA,gBAAYC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,EAAE;IAAA,IAAAC,KAAA;MAAAC,qBAAA;MAAAC,qBAAA;MAAAC,qBAAA;MAAAC,kBAAA;MAAAC,kBAAA;MAAAC,qBAAA;MAAAC,qBAAA;MAAAC,sBAAA;MAAAC,kBAAA;MAAAC,qBAAA;IAAAC,eAAA,OAAAjB,eAAA;IACxD,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACe,aAAa,GAAG,YAAM;MACvB,OAAO3B,kCAAkC,CAAC;QACtC4B,IAAI,EAAEb,KAAI,CAACH,SAAS,CAACiB,MAAM,CAACD,IAAI;QAChCd,QAAQ,EAAEC,KAAI,CAACF,OAAO,CAACC;MAC3B,CAAC,CAAC;IACN,CAAC;IACD,IAAI,CAACgB,QAAQ,GAAG,YAAM;MAClBf,KAAI,CAACJ,QAAQ,CAACoB,aAAa,CAAChB,KAAI,CAAC;MACjCA,KAAI,CAACiB,OAAO,CAACC,aAAa,CAAC,kBAAkB,EAAE;QAC3CrB,SAAS,EAAEG,KAAI,CAACH,SAAS;QACzBsB,IAAI,EAAE;UACFC,OAAO,EAAEpB;QACb;MACJ,CAAC,CAAC;IACN,CAAC;IACD,IAAI,CAACqB,KAAK,GAAG,YAAM;MACf,IAAIrB,KAAI,CAACsB,OAAO,EAAE;QACd;MACJ;MACA,IAAMC,QAAQ,GAAGpC,aAAa,CAACa,KAAI,CAACF,OAAO,CAAC0B,IAAI,CAACD,QAAQ,CAAC;MAC1DvB,KAAI,CAACyB,cAAc,CAACF,QAAQ,CAAC;IACjC,CAAC;IACD,IAAI,CAACE,cAAc,GAAG,UAACF,QAAQ,EAAK;MAChC,IAAMxB,QAAQ,GAAGC,KAAI,CAAC0B,WAAW,CAAC,CAAC;QAAEb,IAAI,GAAGb,KAAI,CAAC2B,OAAO,CAAC,CAAC;QAAEC,sBAAsB,GAAGvC,wBAAwB,CAACW,KAAI,CAAC6B,iBAAiB,CAAC;MACrI,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,QAAQ,EAAEO,CAAC,EAAE,EAAE;QAAA,IAAAC,qBAAA,EAAAC,YAAA;QAC/B,IAAMC,iBAAgB,GAAG/C,UAAU,CAAC,CAAC,CAAC,EAAE0C,sBAAsB,CAAC;QAC/D,IAAI5B,KAAI,CAACkC,UAAU,EAAE;UAAA,IAAAC,qBAAA;UACjB,IAAMC,YAAY,IAAAD,qBAAA,GAAGnC,KAAI,CAACF,OAAO,CAACoC,UAAU,cAAAC,qBAAA,uBAAvBA,qBAAA,CAAyBE,SAAS;UACvD,IAAID,YAAY,EAAE;YACdpC,KAAI,CAACkC,UAAU,CAACI,CAAC,GAAGtC,KAAI,CAACuC,kBAAkB,CAACH,YAAY,CAACE,CAAC,EAAEtC,KAAI,CAACkC,UAAU,CAACI,CAAC,EAAE,GAAG,CAAC;YACnFtC,KAAI,CAACkC,UAAU,CAACM,CAAC,GAAGxC,KAAI,CAACuC,kBAAkB,CAACH,YAAY,CAACI,CAAC,EAAExC,KAAI,CAACkC,UAAU,CAACM,CAAC,EAAE,GAAG,CAAC;YACnFxC,KAAI,CAACkC,UAAU,CAACO,CAAC,GAAGzC,KAAI,CAACuC,kBAAkB,CAACH,YAAY,CAACK,CAAC,EAAEzC,KAAI,CAACkC,UAAU,CAACO,CAAC,EAAE,GAAG,CAAC;UACvF;UACA,IAAI,CAACR,iBAAgB,CAACS,KAAK,EAAE;YACzBT,iBAAgB,CAACS,KAAK,GAAG;cACrBC,KAAK,EAAE3C,KAAI,CAACkC;YAChB,CAAC;UACL,CAAC,MACI;YACDD,iBAAgB,CAACS,KAAK,CAACC,KAAK,GAAG3C,KAAI,CAACkC,UAAU;UAClD;QACJ;QACA,IAAI,CAACnC,QAAQ,EAAE;UACX;QACJ;QACA,IAAM6C,SAAS,IAAAb,qBAAA,IAAAC,YAAA,GAAGhC,KAAI,CAAC6C,MAAM,cAAAb,YAAA,uBAAXA,YAAA,CAAac,cAAc,CAAC/C,QAAQ,EAAEc,IAAI,EAAEb,KAAI,CAAC+C,IAAI,CAAC,cAAAhB,qBAAA,cAAAA,qBAAA,GAAIhC,QAAQ;QACpFC,KAAI,CAACH,SAAS,CAACmD,SAAS,CAACC,WAAW,CAACL,SAAS,EAAEX,iBAAgB,CAAC;MACrE;IACJ,CAAC;IACD,IAAI,CAACiB,aAAa,GAAG,YAAM;MAAA,IAAAC,kBAAA;MACvB,IAAInD,KAAI,CAACsB,OAAO,EAAE;QACd;MACJ;MACA,IAAM8B,QAAQ,IAAAD,kBAAA,GAAGnD,KAAI,CAACF,OAAO,CAACuD,IAAI,cAAAF,kBAAA,uBAAjBA,kBAAA,CAAmBC,QAAQ;MAC5C,IAAIpD,KAAI,CAACH,SAAS,CAACyD,MAAM,CAACC,YAAY,KACjCvD,KAAI,CAACwD,UAAU,GAAG,CAAC,IAAIxD,KAAI,CAACyD,SAAS,CAAC,IACvCL,QAAQ,KAAKM,SAAS,IACtBN,QAAQ,GAAG,CAAC,EAAE;QACdpD,KAAI,CAAC2D,SAAS,GAAGP,QAAQ,GAAG,IAAI;MACpC;IACJ,CAAC;IACD,IAAI,CAACb,kBAAkB,GAAG,UAACF,SAAS,EAAEuB,SAAS,EAAEC,QAAQ,EAAK;MAAA,IAAAC,gBAAA;MAC1D,IAAMjE,SAAS,GAAGG,KAAI,CAACH,SAAS;MAChC,IAAI,CAACwC,SAAS,CAAC0B,MAAM,EAAE;QACnB,OAAOH,SAAS;MACpB;MACA,IAAMI,WAAW,GAAG1E,aAAa,CAAC+C,SAAS,CAAC4B,MAAM,CAAC;QAAEC,KAAK,GAAG/E,aAAa,CAACa,KAAI,CAACF,OAAO,CAAC0B,IAAI,CAAC0C,KAAK,CAAC;QAAEC,UAAU,GAAI,IAAI,GAAGD,KAAK,GAAIrE,SAAS,CAACyD,MAAM,CAACC,YAAY;QAAEa,UAAU,GAAGjF,aAAa,EAAA2E,gBAAA,GAACzB,SAAS,CAACgC,KAAK,cAAAP,gBAAA,cAAAA,gBAAA,GAAI,CAAC,CAAC;MAClN,OAAO,CAACF,SAAS,GAAIQ,UAAU,GAAGvE,SAAS,CAACyE,QAAQ,GAAIH,UAAU,GAAGH,WAAW,GAAG,GAAG,IAAIH,QAAQ;IACtG,CAAC;IACD,IAAI,CAAC5C,OAAO,GAAGtB,MAAM;IACrB,IAAI,CAAC4E,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACC,iBAAiB,GAAG,CAAC;IAC1B,IAAI,CAACC,kBAAkB,GAAG,CAAC;IAC3B,IAAI,CAACC,gBAAgB,GAAG3E,QAAQ;IAChC,IAAID,OAAO,YAAYN,OAAO,EAAE;MAC5B,IAAI,CAACM,OAAO,GAAGA,OAAO;IAC1B,CAAC,MACI;MACD,IAAI,CAACA,OAAO,GAAG,IAAIN,OAAO,CAAC,CAAC;MAC5B,IAAI,CAACM,OAAO,CAAC6E,IAAI,CAAC7E,OAAO,CAAC;IAC9B;IACA,IAAI,CAAC8E,WAAW,GAAI,EAAA3E,qBAAA,GAAC,IAAI,CAACH,OAAO,CAACuD,IAAI,CAACa,KAAK,cAAAjE,qBAAA,cAAAA,qBAAA,GAAI,CAAC,IAAI,IAAI,GAAI,IAAI,CAACJ,SAAS,CAACyD,MAAM,CAACC,YAAY;IAC/F,IAAI,CAACxD,QAAQ,IAAAG,qBAAA,GAAG,IAAI,CAACwE,gBAAgB,cAAAxE,qBAAA,cAAAA,qBAAA,GAAI,IAAI,CAACU,aAAa,CAAC,CAAC;IAC7D,IAAI,CAACiE,IAAI,GAAG,IAAI,CAAC/E,OAAO,CAAC+E,IAAI;IAC7B,IAAI,CAAChC,MAAM,IAAA1C,qBAAA,GAAG,IAAI,CAACc,OAAO,CAAC6D,mBAAmB,cAAA3E,qBAAA,uBAAhCA,qBAAA,CAAkC4E,QAAQ,CAAC,IAAI,CAACjF,OAAO,CAACkF,KAAK,CAAC;IAC5EC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACpF,OAAO,CAACkF,KAAK,EAAE,IAAI,CAACnC,MAAM,CAAC;IAC5C,IAAI,CAACE,IAAI,GAAG,IAAI,CAACjD,OAAO,CAACiD,IAAI;IAC7B,IAAI,CAACoC,WAAW,GAAG,CAAC,IAAI,CAACrF,OAAO,CAACuD,IAAI,CAAC+B,IAAI;IAC1C,IAAI,CAACC,oBAAoB,GAAG,KAAK;IACjC,IAAIpD,gBAAgB,GAAG/C,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAACY,OAAO,CAACkD,SAAS,CAAC;IAC7D,CAAA5C,kBAAA,GAAA6B,gBAAgB,cAAA7B,kBAAA,cAAAA,kBAAA,GAAhB6B,gBAAgB,GAAK,CAAC,CAAC;IACvB,CAAA3B,qBAAA,IAAAD,kBAAA,GAAA4B,gBAAgB,EAACqD,IAAI,cAAAhF,qBAAA,cAAAA,qBAAA,GAArBD,kBAAA,CAAiBiF,IAAI,GAAK,CAAC,CAAC;IAC5B,CAAA9E,sBAAA,IAAAD,qBAAA,GAAA0B,gBAAgB,CAACqD,IAAI,EAACC,SAAS,cAAA/E,sBAAA,cAAAA,sBAAA,GAA/BD,qBAAA,CAAsBgF,SAAS,GAAK,IAAI,CAACzF,OAAO,CAACyF,SAAS;IAC1D,IAAI,IAAI,CAACzF,OAAO,CAACoC,UAAU,EAAE;MACzB,IAAI,CAACA,UAAU,GAAG3C,eAAe,CAAC,IAAI,CAACO,OAAO,CAACoC,UAAU,CAAC;IAC9D;IACA,IAAI,CAACZ,OAAO,GAAG,CAAC,IAAI,CAACxB,OAAO,CAAC0F,QAAQ;IACrC,IAAI,CAAC3D,iBAAiB,GAAGI,gBAAgB;IACzC,IAAI,CAACpB,IAAI,IAAAJ,kBAAA,GACL,IAAI,CAACX,OAAO,CAACe,IAAI,cAAAJ,kBAAA,cAAAA,kBAAA,GACZ,YAAM;MACH,IAAMI,IAAI,GAAG,IAAIpB,WAAW,CAAC,CAAC;MAC9BoB,IAAI,CAAC8D,IAAI,CAAC;QACNc,MAAM,EAAE,CAAC;QACTC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE;MACX,CAAC,CAAC;MACF,OAAO9E,IAAI;IACf,CAAC,CAAE,CAAC;IACZ,IAAI,CAAC2C,UAAU,IAAA9C,qBAAA,GAAG,IAAI,CAACZ,OAAO,CAACuD,IAAI,CAACuC,KAAK,cAAAlF,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAC;IAC/C,IAAI,CAAC+C,SAAS,GAAG,IAAI,CAACD,UAAU,IAAI,CAAC;IACrC,IAAI,CAACvC,OAAO,CAACC,aAAa,CAAC,gBAAgB,EAAE;MACzCrB,SAAS,EAATA,SAAS;MACTsB,IAAI,EAAE;QACFC,OAAO,EAAE;MACb;IACJ,CAAC,CAAC;IACF,IAAI,CAACyE,IAAI,CAAC,CAAC;EACf;EAACC,YAAA,CAAApG,eAAA;IAAAqG,GAAA;IAAApD,KAAA,EACD,SAAAqD,cAAA,EAAgB;MACZ,IAAI,CAAC1E,OAAO,GAAG,IAAI;MACnB,IAAI,CAAC2E,KAAK,CAAC,CAAC;IAChB;EAAC;IAAAF,GAAA;IAAApD,KAAA,EACD,SAAAuD,aAAA,EAAe;MACX,IAAI,CAAC5E,OAAO,GAAG,KAAK;MACpB,IAAI,CAACuE,IAAI,CAAC,CAAC;IACf;EAAC;IAAAE,GAAA;IAAApD,KAAA,EACD,SAAAjB,YAAA,EAAc;MACV,IAAI,IAAI,CAAC5B,OAAO,CAACqG,KAAK,EAAE;QACpB,IAAMtG,SAAS,GAAG,IAAI,CAACA,SAAS;UAAEuG,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAAC,IAAI,CAACxG,OAAO,CAACqG,KAAK,CAAC;QACvF,IAAIC,OAAO,EAAE;UACT,IAAMG,MAAM,GAAGH,OAAO,CAACI,qBAAqB,CAAC,CAAC;UAC9C,OAAO;YACHC,CAAC,EAAE,CAACF,MAAM,CAACE,CAAC,GAAGF,MAAM,CAACZ,KAAK,GAAG,CAAC,IAAI9F,SAAS,CAACyD,MAAM,CAACoD,UAAU;YAC9DC,CAAC,EAAE,CAACJ,MAAM,CAACI,CAAC,GAAGJ,MAAM,CAACd,MAAM,GAAG,CAAC,IAAI5F,SAAS,CAACyD,MAAM,CAACoD;UACzD,CAAC;QACL;MACJ;MACA,OAAO,IAAI,CAAC3G,QAAQ;IACxB;EAAC;IAAAgG,GAAA;IAAApD,KAAA,EACD,SAAAhB,QAAA,EAAU;MACN,IAAM9B,SAAS,GAAG,IAAI,CAACA,SAAS;MAChC,IAAI,IAAI,CAACC,OAAO,CAACqG,KAAK,EAAE;QACpB,IAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAc,CAAC,IAAI,CAACxG,OAAO,CAACqG,KAAK,CAAC;QAC3D,IAAIC,OAAO,EAAE;UACT,IAAMG,MAAM,GAAGH,OAAO,CAACI,qBAAqB,CAAC,CAAC;UAC9C,OAAO;YACHb,KAAK,EAAEY,MAAM,CAACZ,KAAK,GAAG9F,SAAS,CAACyD,MAAM,CAACoD,UAAU;YACjDjB,MAAM,EAAEc,MAAM,CAACd,MAAM,GAAG5F,SAAS,CAACyD,MAAM,CAACoD;UAC7C,CAAC;QACL;MACJ;MACA,OAAO;QACHf,KAAK,EAAE,IAAI,CAAC9E,IAAI,CAAC6E,IAAI,KAAK,SAAS,GAC5B7F,SAAS,CAACiB,MAAM,CAACD,IAAI,CAAC8E,KAAK,GAAG,IAAI,CAAC9E,IAAI,CAAC8E,KAAK,GAAI,GAAG,GACrD,IAAI,CAAC9E,IAAI,CAAC8E,KAAK;QACrBF,MAAM,EAAE,IAAI,CAAC5E,IAAI,CAAC6E,IAAI,KAAK,SAAS,GAC7B7F,SAAS,CAACiB,MAAM,CAACD,IAAI,CAAC4E,MAAM,GAAG,IAAI,CAAC5E,IAAI,CAAC4E,MAAM,GAAI,GAAG,GACvD,IAAI,CAAC5E,IAAI,CAAC4E;MACpB,CAAC;IACL;EAAC;IAAAM,GAAA;IAAApD,KAAA,EACD,SAAAsD,MAAA,EAAQ;MACJ,IAAI,IAAI,CAAC3E,OAAO,EAAE;QACd;MACJ;MACA,OAAO,IAAI,CAACsF,UAAU;IAC1B;EAAC;IAAAb,GAAA;IAAApD,KAAA,EACD,SAAAkD,KAAA,EAAO;MAAA,IAAAgB,iBAAA;MACH,IAAI,IAAI,CAACvF,OAAO,EAAE;QACd;MACJ;MACA,IAAI,EAAE,IAAI,CAACzB,SAAS,CAACyD,MAAM,CAACC,YAAY,KACnC,IAAI,CAACC,UAAU,GAAG,CAAC,IAAI,IAAI,CAACC,SAAS,IAAI,CAAC,IAAI,CAAC3D,OAAO,CAACuD,IAAI,CAACuC,KAAK,CAAC,KAClE,IAAI,CAACT,WAAW,IAAI,IAAI,CAACV,kBAAkB,MAAAoC,iBAAA,GAAK,IAAI,CAACjC,WAAW,cAAAiC,iBAAA,cAAAA,iBAAA,GAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC3E;MACJ;MACA,IAAI,IAAI,CAACD,UAAU,KAAKlD,SAAS,EAAE;QAC/B,IAAMQ,KAAK,GAAG/E,aAAa,CAAC,IAAI,CAACW,OAAO,CAAC0B,IAAI,CAAC0C,KAAK,CAAC;QACpD,IAAI,CAAC0C,UAAU,GAAI,IAAI,GAAG1C,KAAK,GAAI,IAAI,CAACrE,SAAS,CAACyD,MAAM,CAACC,YAAY;MACzE;MACA,IAAI,IAAI,CAACC,UAAU,GAAG,CAAC,IAAI,IAAI,CAACC,SAAS,EAAE;QACvC,IAAI,CAACP,aAAa,CAAC,CAAC;MACxB;IACJ;EAAC;IAAA6C,GAAA;IAAApD,KAAA,EACD,SAAAmE,OAAA,EAAS;MACL,IAAMC,eAAe,GAAG,IAAI,CAACrC,gBAAgB;MAC7C,IAAI,CAAC3E,QAAQ,GACTgH,eAAe,IAAI3H,aAAa,CAAC2H,eAAe,EAAE,IAAI,CAAClH,SAAS,CAACiB,MAAM,CAACD,IAAI,EAAE7B,MAAM,CAACgI,MAAM,CAAC,GACtFD,eAAe,GACf,IAAI,CAACnG,aAAa,CAAC,CAAC;IAClC;EAAC;IAAAmF,GAAA;IAAApD,KAAA,EACD,SAAAsE,OAAOC,KAAK,EAAE;MACV,IAAI,IAAI,CAAC5F,OAAO,EAAE;QACd;MACJ;MACA,IAAI,IAAI,CAAC6D,WAAW,EAAE;QAAA,IAAAgC,kBAAA,EAAAC,gBAAA;QAClB,IAAI,CAACjC,WAAW,GAAG,KAAK;QACxB,IAAI,CAACV,kBAAkB,IAAA0C,kBAAA,GAAG,IAAI,CAACvC,WAAW,cAAAuC,kBAAA,cAAAA,kBAAA,GAAI,CAAC;QAC/C,IAAI,CAAC3C,iBAAiB,IAAA4C,gBAAA,GAAG,IAAI,CAACR,UAAU,cAAAQ,gBAAA,cAAAA,gBAAA,GAAI,CAAC;MACjD;MACA,IAAI,CAAC,IAAI,CAAC/B,oBAAoB,EAAE;QAC5B,IAAI,CAACA,oBAAoB,GAAG,IAAI;QAChC,IAAI,CAAC5D,cAAc,CAAC,IAAI,CAAC3B,OAAO,CAACuH,UAAU,CAAC;MAChD;MACA,IAAI,IAAI,CAAC1D,SAAS,KAAKD,SAAS,EAAE;QAC9B,IAAI,CAACa,gBAAgB,IAAI2C,KAAK,CAACvE,KAAK;QACpC,IAAI,IAAI,CAAC4B,gBAAgB,IAAI,IAAI,CAACZ,SAAS,EAAE;UACzC,IAAI,CAACsC,KAAK,CAAC,CAAC;UACZ,IAAI,IAAI,CAACrB,WAAW,KAAKlB,SAAS,EAAE;YAChC,OAAO,IAAI,CAACkB,WAAW;UAC3B;UACA,IAAI,CAAC,IAAI,CAACnB,SAAS,EAAE;YACjB,IAAI,CAACD,UAAU,EAAE;UACrB;UACA,IAAI,IAAI,CAACA,UAAU,GAAG,CAAC,IAAI,IAAI,CAACC,SAAS,EAAE;YAAA,IAAA6D,sBAAA;YACvC,IAAI,CAACvH,QAAQ,GAAG,IAAI,CAACa,aAAa,CAAC,CAAC;YACpC,IAAI,CAACgE,WAAW,GAAI,EAAA0C,sBAAA,GAAC,IAAI,CAACxH,OAAO,CAACuD,IAAI,CAACa,KAAK,cAAAoD,sBAAA,cAAAA,sBAAA,GAAI,CAAC,IAAI,IAAI,GAAI,IAAI,CAACzH,SAAS,CAACyD,MAAM,CAACC,YAAY;UACnG,CAAC,MACI;YACD,IAAI,CAACxC,QAAQ,CAAC,CAAC;UACnB;UACA,IAAI,CAACwD,gBAAgB,IAAI,IAAI,CAACZ,SAAS;UACvC,OAAO,IAAI,CAACA,SAAS;QACzB;MACJ;MACA,IAAI,IAAI,CAACiB,WAAW,KAAKlB,SAAS,EAAE;QAChC,IAAI,CAACe,kBAAkB,IAAIyC,KAAK,CAACvE,KAAK;QACtC,IAAI,IAAI,CAAC8B,kBAAkB,IAAI,IAAI,CAACG,WAAW,EAAE;UAC7C,IAAI,CAAC3D,OAAO,CAACC,aAAa,CAAC,aAAa,EAAE;YACtCrB,SAAS,EAAE,IAAI,CAACA;UACpB,CAAC,CAAC;UACF,IAAI,CAACgG,IAAI,CAAC,CAAC;UACX,IAAI,CAACpB,kBAAkB,IAAI,IAAI,CAACA,kBAAkB;UAClD,OAAO,IAAI,CAACG,WAAW;QAC3B;MACJ;MACA,IAAI,IAAI,CAACgC,UAAU,KAAKlD,SAAS,EAAE;QAC/B,IAAI,CAACc,iBAAiB,IAAI0C,KAAK,CAACvE,KAAK;QACrC,IAAI,IAAI,CAAC6B,iBAAiB,IAAI,IAAI,CAACoC,UAAU,EAAE;UAC3C,IAAI,CAACvF,KAAK,CAAC,CAAC;UACZ,IAAI,CAACmD,iBAAiB,IAAI,IAAI,CAACoC,UAAU;QAC7C;MACJ;IACJ;EAAC;EAAA,OAAAlH,eAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}