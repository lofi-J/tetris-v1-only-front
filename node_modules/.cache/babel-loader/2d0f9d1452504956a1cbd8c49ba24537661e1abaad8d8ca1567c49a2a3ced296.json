{"ast":null,"code":"import _classCallCheck from \"/Users/Pajamas/portfolios/tetris/tetris-v1/tetris/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Pajamas/portfolios/tetris/tetris-v1/tetris/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, rangeColorToRgb } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nexport var AbsorberInstance = /*#__PURE__*/function () {\n  function AbsorberInstance(absorbers, container, options, position) {\n    var _this = this,\n      _rangeColorToRgb,\n      _this$initialPosition,\n      _this$initialPosition2;\n    _classCallCheck(this, AbsorberInstance);\n    this.absorbers = absorbers;\n    this.container = container;\n    this._calcPosition = function () {\n      var exactPosition = calcPositionOrRandomFromSizeRanged({\n        size: _this.container.canvas.size,\n        position: _this.options.position\n      });\n      return Vector.create(exactPosition.x, exactPosition.y);\n    };\n    this._updateParticlePosition = function (particle, v) {\n      if (particle.destroyed) {\n        return;\n      }\n      var container = _this.container,\n        canvasSize = container.canvas.size;\n      if (particle.needsNewPosition) {\n        var newPosition = calcPositionOrRandomFromSize({\n          size: canvasSize\n        });\n        particle.position.setTo(newPosition);\n        particle.velocity.setTo(particle.initialVelocity);\n        particle.absorberOrbit = undefined;\n        particle.needsNewPosition = false;\n      }\n      if (_this.options.orbits) {\n        var _particle$retina$move;\n        if (particle.absorberOrbit === undefined) {\n          particle.absorberOrbit = Vector.create(0, 0);\n          particle.absorberOrbit.length = getDistance(particle.getPosition(), _this.position);\n          particle.absorberOrbit.angle = getRandom() * Math.PI * 2;\n        }\n        if (particle.absorberOrbit.length <= _this.size && !_this.options.destroy) {\n          var minSize = Math.min(canvasSize.width, canvasSize.height);\n          particle.absorberOrbit.length = minSize * (1 + (getRandom() * 0.2 - 0.1));\n        }\n        if (particle.absorberOrbitDirection === undefined) {\n          particle.absorberOrbitDirection = particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n        }\n        var orbitRadius = particle.absorberOrbit.length,\n          orbitAngle = particle.absorberOrbit.angle,\n          orbitDirection = particle.absorberOrbitDirection;\n        particle.velocity.setTo(Vector.origin);\n        var updateFunc = {\n          x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n          y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos\n        };\n        particle.position.x = _this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n        particle.position.y = _this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n        particle.absorberOrbit.length -= v.length;\n        particle.absorberOrbit.angle += ((_particle$retina$move = particle.retina.moveSpeed) !== null && _particle$retina$move !== void 0 ? _particle$retina$move : 0) * container.retina.pixelRatio / 100 * container.retina.reduceFactor;\n      } else {\n        var addV = Vector.origin;\n        addV.length = v.length;\n        addV.angle = v.angle;\n        particle.velocity.addTo(addV);\n      }\n    };\n    this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n    if (options instanceof Absorber) {\n      this.options = options;\n    } else {\n      this.options = new Absorber();\n      this.options.load(options);\n    }\n    this.dragging = false;\n    this.name = this.options.name;\n    this.opacity = this.options.opacity;\n    this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n    this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n    var limit = this.options.size.limit;\n    this.limit = {\n      radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n      mass: limit.mass\n    };\n    this.color = (_rangeColorToRgb = rangeColorToRgb(this.options.color)) !== null && _rangeColorToRgb !== void 0 ? _rangeColorToRgb : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_this$initialPosition = (_this$initialPosition2 = this.initialPosition) === null || _this$initialPosition2 === void 0 ? void 0 : _this$initialPosition2.copy()) !== null && _this$initialPosition !== void 0 ? _this$initialPosition : this._calcPosition();\n  }\n  _createClass(AbsorberInstance, [{\n    key: \"attract\",\n    value: function attract(particle) {\n      var container = this.container,\n        options = this.options;\n      if (options.draggable) {\n        var mouse = container.interactivity.mouse;\n        if (mouse.clicking && mouse.downPosition) {\n          var mouseDist = getDistance(this.position, mouse.downPosition);\n          if (mouseDist <= this.size) {\n            this.dragging = true;\n          }\n        } else {\n          this.dragging = false;\n        }\n        if (this.dragging && mouse.position) {\n          this.position.x = mouse.position.x;\n          this.position.y = mouse.position.y;\n        }\n      }\n      var pos = particle.getPosition(),\n        _getDistances = getDistances(this.position, pos),\n        dx = _getDistances.dx,\n        dy = _getDistances.dy,\n        distance = _getDistances.distance,\n        v = Vector.create(dx, dy);\n      v.length = this.mass / Math.pow(distance, 2) * container.retina.reduceFactor;\n      if (distance < this.size + particle.getRadius()) {\n        var sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n        if (this.size > particle.getRadius() && distance < this.size - particle.getRadius() || particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0) {\n          if (options.destroy) {\n            particle.destroy();\n          } else {\n            particle.needsNewPosition = true;\n            this._updateParticlePosition(particle, v);\n          }\n        } else {\n          if (options.destroy) {\n            particle.size.value -= sizeFactor;\n          }\n          this._updateParticlePosition(particle, v);\n        }\n        if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n          this.size += sizeFactor;\n        }\n        if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n          this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n        }\n      } else {\n        this._updateParticlePosition(particle, v);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(context) {\n      context.translate(this.position.x, this.position.y);\n      context.beginPath();\n      context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n      context.closePath();\n      context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n      context.fill();\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var initialPosition = this.initialPosition;\n      this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin) ? initialPosition : this._calcPosition();\n    }\n  }]);\n  return AbsorberInstance;\n}();","map":{"version":3,"names":["Vector","calcPositionOrRandomFromSize","calcPositionOrRandomFromSizeRanged","getDistance","getDistances","getRandom","getRangeValue","getStyleFromRgb","isPointInside","rangeColorToRgb","Absorber","AbsorberInstance","absorbers","container","options","position","_this","_rangeColorToRgb","_this$initialPosition","_this$initialPosition2","_classCallCheck","_calcPosition","exactPosition","size","canvas","create","x","y","_updateParticlePosition","particle","v","destroyed","canvasSize","needsNewPosition","newPosition","setTo","velocity","initialVelocity","absorberOrbit","undefined","orbits","_particle$retina$move","length","getPosition","angle","Math","PI","destroy","minSize","min","width","height","absorberOrbitDirection","orbitRadius","orbitAngle","orbitDirection","origin","updateFunc","cos","sin","retina","moveSpeed","pixelRatio","reduceFactor","addV","addTo","initialPosition","load","dragging","name","opacity","value","mass","density","limit","radius","color","b","g","r","copy","_createClass","key","attract","draggable","mouse","interactivity","clicking","downPosition","mouseDist","pos","_getDistances","dx","dy","distance","pow","getRadius","sizeFactor","draw","context","translate","beginPath","arc","closePath","fillStyle","fill","resize"],"sources":["/Users/Pajamas/portfolios/tetris/tetris-v1/tetris/node_modules/tsparticles-plugin-absorbers/esm/AbsorberInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSize, calcPositionOrRandomFromSizeRanged, getDistance, getDistances, getRandom, getRangeValue, getStyleFromRgb, isPointInside, rangeColorToRgb, } from \"tsparticles-engine\";\nimport { Absorber } from \"./Options/Classes/Absorber\";\nexport class AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        this.absorbers = absorbers;\n        this.container = container;\n        this._calcPosition = () => {\n            const exactPosition = calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n            return Vector.create(exactPosition.x, exactPosition.y);\n        };\n        this._updateParticlePosition = (particle, v) => {\n            if (particle.destroyed) {\n                return;\n            }\n            const container = this.container, canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n                const newPosition = calcPositionOrRandomFromSize({ size: canvasSize });\n                particle.position.setTo(newPosition);\n                particle.velocity.setTo(particle.initialVelocity);\n                particle.absorberOrbit = undefined;\n                particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n                if (particle.absorberOrbit === undefined) {\n                    particle.absorberOrbit = Vector.create(0, 0);\n                    particle.absorberOrbit.length = getDistance(particle.getPosition(), this.position);\n                    particle.absorberOrbit.angle = getRandom() * Math.PI * 2;\n                }\n                if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                    const minSize = Math.min(canvasSize.width, canvasSize.height);\n                    particle.absorberOrbit.length = minSize * (1 + (getRandom() * 0.2 - 0.1));\n                }\n                if (particle.absorberOrbitDirection === undefined) {\n                    particle.absorberOrbitDirection =\n                        particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n                }\n                const orbitRadius = particle.absorberOrbit.length, orbitAngle = particle.absorberOrbit.angle, orbitDirection = particle.absorberOrbitDirection;\n                particle.velocity.setTo(Vector.origin);\n                const updateFunc = {\n                    x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                    y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos,\n                };\n                particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n                particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n                particle.absorberOrbit.length -= v.length;\n                particle.absorberOrbit.angle +=\n                    (((particle.retina.moveSpeed ?? 0) * container.retina.pixelRatio) / 100) *\n                        container.retina.reduceFactor;\n            }\n            else {\n                const addV = Vector.origin;\n                addV.length = v.length;\n                addV.angle = v.angle;\n                particle.velocity.addTo(addV);\n            }\n        };\n        this.initialPosition = position ? Vector.create(position.x, position.y) : undefined;\n        if (options instanceof Absorber) {\n            this.options = options;\n        }\n        else {\n            this.options = new Absorber();\n            this.options.load(options);\n        }\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n        const limit = this.options.size.limit;\n        this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass,\n        };\n        this.color = rangeColorToRgb(this.options.color) ?? {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = this.initialPosition?.copy() ?? this._calcPosition();\n    }\n    attract(particle) {\n        const container = this.container, options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition(), { dx, dy, distance } = getDistances(this.position, pos), v = Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, 2)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this._updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this._updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this._updateParticlePosition(particle, v);\n        }\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}